{"ast":null,"code":"\"use strict\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _RedisSocket_instances, _a, _RedisSocket_initiateOptions, _RedisSocket_defaultReconnectStrategy, _RedisSocket_isTlsSocket, _RedisSocket_initiator, _RedisSocket_options, _RedisSocket_socket, _RedisSocket_isOpen, _RedisSocket_isReady, _RedisSocket_writableNeedDrain, _RedisSocket_connect, _RedisSocket_createSocket, _RedisSocket_createNetSocket, _RedisSocket_createTlsSocket, _RedisSocket_onSocketError, _RedisSocket_isCorked;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst events_1 = require(\"events\");\nconst net = require(\"net\");\nconst tls = require(\"tls\");\nconst errors_1 = require(\"../errors\");\nconst utils_1 = require(\"../utils\");\nclass RedisSocket extends events_1.EventEmitter {\n  constructor(initiator, options) {\n    super();\n    _RedisSocket_instances.add(this);\n    _RedisSocket_initiator.set(this, void 0);\n    _RedisSocket_options.set(this, void 0);\n    _RedisSocket_socket.set(this, void 0);\n    _RedisSocket_isOpen.set(this, false);\n    _RedisSocket_isReady.set(this, false);\n    // `writable.writableNeedDrain` was added in v15.2.0 and therefore can't be used\n    // https://nodejs.org/api/stream.html#stream_writable_writableneeddrain\n    _RedisSocket_writableNeedDrain.set(this, false);\n    _RedisSocket_isCorked.set(this, false);\n    __classPrivateFieldSet(this, _RedisSocket_initiator, initiator, \"f\");\n    __classPrivateFieldSet(this, _RedisSocket_options, __classPrivateFieldGet(RedisSocket, _a, \"m\", _RedisSocket_initiateOptions).call(RedisSocket, options), \"f\");\n  }\n  get isOpen() {\n    return __classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\");\n  }\n  get isReady() {\n    return __classPrivateFieldGet(this, _RedisSocket_isReady, \"f\");\n  }\n  get writableNeedDrain() {\n    return __classPrivateFieldGet(this, _RedisSocket_writableNeedDrain, \"f\");\n  }\n  async connect() {\n    if (__classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\")) {\n      throw new Error('Socket already opened');\n    }\n    return __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_connect).call(this, 0);\n  }\n  writeCommand(args) {\n    if (!__classPrivateFieldGet(this, _RedisSocket_socket, \"f\")) {\n      throw new errors_1.ClientClosedError();\n    }\n    for (const toWrite of args) {\n      __classPrivateFieldSet(this, _RedisSocket_writableNeedDrain, !__classPrivateFieldGet(this, _RedisSocket_socket, \"f\").write(toWrite), \"f\");\n    }\n  }\n  disconnect() {\n    if (!__classPrivateFieldGet(this, _RedisSocket_socket, \"f\")) {\n      throw new errors_1.ClientClosedError();\n    } else {\n      __classPrivateFieldSet(this, _RedisSocket_isOpen, __classPrivateFieldSet(this, _RedisSocket_isReady, false, \"f\"), \"f\");\n    }\n    __classPrivateFieldGet(this, _RedisSocket_socket, \"f\").destroy();\n    __classPrivateFieldSet(this, _RedisSocket_socket, undefined, \"f\");\n    this.emit('end');\n  }\n  async quit(fn) {\n    if (!__classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\")) {\n      throw new errors_1.ClientClosedError();\n    }\n    __classPrivateFieldSet(this, _RedisSocket_isOpen, false, \"f\");\n    await fn();\n    this.disconnect();\n  }\n  cork() {\n    if (!__classPrivateFieldGet(this, _RedisSocket_socket, \"f\") || __classPrivateFieldGet(this, _RedisSocket_isCorked, \"f\")) {\n      return;\n    }\n    __classPrivateFieldGet(this, _RedisSocket_socket, \"f\").cork();\n    __classPrivateFieldSet(this, _RedisSocket_isCorked, true, \"f\");\n    queueMicrotask(() => {\n      __classPrivateFieldGet(this, _RedisSocket_socket, \"f\")?.uncork();\n      __classPrivateFieldSet(this, _RedisSocket_isCorked, false, \"f\");\n    });\n  }\n}\nexports.default = RedisSocket;\n_a = RedisSocket, _RedisSocket_initiator = new WeakMap(), _RedisSocket_options = new WeakMap(), _RedisSocket_socket = new WeakMap(), _RedisSocket_isOpen = new WeakMap(), _RedisSocket_isReady = new WeakMap(), _RedisSocket_writableNeedDrain = new WeakMap(), _RedisSocket_isCorked = new WeakMap(), _RedisSocket_instances = new WeakSet(), _RedisSocket_initiateOptions = function _RedisSocket_initiateOptions(options) {\n  var _b, _c;\n  options ?? (options = {});\n  if (!options.path) {\n    (_b = options).port ?? (_b.port = 6379);\n    (_c = options).host ?? (_c.host = 'localhost');\n  }\n  options.connectTimeout ?? (options.connectTimeout = 5000);\n  options.keepAlive ?? (options.keepAlive = 5000);\n  options.noDelay ?? (options.noDelay = true);\n  return options;\n}, _RedisSocket_defaultReconnectStrategy = function _RedisSocket_defaultReconnectStrategy(retries) {\n  return Math.min(retries * 50, 500);\n}, _RedisSocket_isTlsSocket = function _RedisSocket_isTlsSocket(options) {\n  return options.tls === true;\n}, _RedisSocket_connect = async function _RedisSocket_connect(retries, hadError) {\n  if (retries > 0 || hadError) {\n    this.emit('reconnecting');\n  }\n  try {\n    __classPrivateFieldSet(this, _RedisSocket_isOpen, true, \"f\");\n    __classPrivateFieldSet(this, _RedisSocket_socket, await __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_createSocket).call(this), \"f\");\n    __classPrivateFieldSet(this, _RedisSocket_writableNeedDrain, false, \"f\");\n    this.emit('connect');\n    try {\n      await __classPrivateFieldGet(this, _RedisSocket_initiator, \"f\").call(this);\n    } catch (err) {\n      __classPrivateFieldGet(this, _RedisSocket_socket, \"f\").destroy();\n      __classPrivateFieldSet(this, _RedisSocket_socket, undefined, \"f\");\n      throw err;\n    }\n    __classPrivateFieldSet(this, _RedisSocket_isReady, true, \"f\");\n    this.emit('ready');\n  } catch (err) {\n    this.emit('error', err);\n    const retryIn = (__classPrivateFieldGet(this, _RedisSocket_options, \"f\")?.reconnectStrategy ?? __classPrivateFieldGet(RedisSocket, _a, \"m\", _RedisSocket_defaultReconnectStrategy))(retries);\n    if (retryIn instanceof Error) {\n      __classPrivateFieldSet(this, _RedisSocket_isOpen, false, \"f\");\n      throw new errors_1.ReconnectStrategyError(retryIn, err);\n    }\n    await (0, utils_1.promiseTimeout)(retryIn);\n    return __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_connect).call(this, retries + 1);\n  }\n}, _RedisSocket_createSocket = function _RedisSocket_createSocket() {\n  return new Promise((resolve, reject) => {\n    const {\n      connectEvent,\n      socket\n    } = __classPrivateFieldGet(RedisSocket, _a, \"m\", _RedisSocket_isTlsSocket).call(RedisSocket, __classPrivateFieldGet(this, _RedisSocket_options, \"f\")) ? __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_createTlsSocket).call(this) : __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_createNetSocket).call(this);\n    if (__classPrivateFieldGet(this, _RedisSocket_options, \"f\").connectTimeout) {\n      socket.setTimeout(__classPrivateFieldGet(this, _RedisSocket_options, \"f\").connectTimeout, () => socket.destroy(new errors_1.ConnectionTimeoutError()));\n    }\n    socket.setNoDelay(__classPrivateFieldGet(this, _RedisSocket_options, \"f\").noDelay).once('error', reject).once(connectEvent, () => {\n      socket.setTimeout(0)\n      // https://github.com/nodejs/node/issues/31663\n      .setKeepAlive(__classPrivateFieldGet(this, _RedisSocket_options, \"f\").keepAlive !== false, __classPrivateFieldGet(this, _RedisSocket_options, \"f\").keepAlive || 0).off('error', reject).once('error', err => __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_onSocketError).call(this, err)).once('close', hadError => {\n        if (!hadError && __classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\") && __classPrivateFieldGet(this, _RedisSocket_socket, \"f\") === socket) {\n          __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_onSocketError).call(this, new errors_1.SocketClosedUnexpectedlyError());\n        }\n      }).on('drain', () => {\n        __classPrivateFieldSet(this, _RedisSocket_writableNeedDrain, false, \"f\");\n        this.emit('drain');\n      }).on('data', data => this.emit('data', data));\n      resolve(socket);\n    });\n  });\n}, _RedisSocket_createNetSocket = function _RedisSocket_createNetSocket() {\n  return {\n    connectEvent: 'connect',\n    socket: net.connect(__classPrivateFieldGet(this, _RedisSocket_options, \"f\")) // TODO\n  };\n}, _RedisSocket_createTlsSocket = function _RedisSocket_createTlsSocket() {\n  return {\n    connectEvent: 'secureConnect',\n    socket: tls.connect(__classPrivateFieldGet(this, _RedisSocket_options, \"f\")) // TODO\n  };\n}, _RedisSocket_onSocketError = function _RedisSocket_onSocketError(err) {\n  __classPrivateFieldSet(this, _RedisSocket_isReady, false, \"f\");\n  this.emit('error', err);\n  __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_connect).call(this, 0, true).catch(() => {\n    // the error was already emitted, silently ignore it\n  });\n};","map":{"version":3,"names":["__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","__classPrivateFieldGet","get","_RedisSocket_instances","_a","_RedisSocket_initiateOptions","_RedisSocket_defaultReconnectStrategy","_RedisSocket_isTlsSocket","_RedisSocket_initiator","_RedisSocket_options","_RedisSocket_socket","_RedisSocket_isOpen","_RedisSocket_isReady","_RedisSocket_writableNeedDrain","_RedisSocket_connect","_RedisSocket_createSocket","_RedisSocket_createNetSocket","_RedisSocket_createTlsSocket","_RedisSocket_onSocketError","_RedisSocket_isCorked","Object","defineProperty","exports","events_1","require","net","tls","errors_1","utils_1","RedisSocket","EventEmitter","constructor","initiator","options","add","isOpen","isReady","writableNeedDrain","connect","Error","writeCommand","args","ClientClosedError","toWrite","write","disconnect","destroy","undefined","emit","quit","fn","cork","queueMicrotask","uncork","default","WeakMap","WeakSet","_b","_c","path","port","host","connectTimeout","keepAlive","noDelay","retries","Math","min","hadError","err","retryIn","reconnectStrategy","ReconnectStrategyError","promiseTimeout","Promise","resolve","reject","connectEvent","socket","setTimeout","ConnectionTimeoutError","setNoDelay","once","setKeepAlive","off","SocketClosedUnexpectedlyError","on","data","catch"],"sources":["C:/Users/nates/Pro/anagrams/node_modules/@redis/client/dist/lib/client/socket.js"],"sourcesContent":["\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _RedisSocket_instances, _a, _RedisSocket_initiateOptions, _RedisSocket_defaultReconnectStrategy, _RedisSocket_isTlsSocket, _RedisSocket_initiator, _RedisSocket_options, _RedisSocket_socket, _RedisSocket_isOpen, _RedisSocket_isReady, _RedisSocket_writableNeedDrain, _RedisSocket_connect, _RedisSocket_createSocket, _RedisSocket_createNetSocket, _RedisSocket_createTlsSocket, _RedisSocket_onSocketError, _RedisSocket_isCorked;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst events_1 = require(\"events\");\nconst net = require(\"net\");\nconst tls = require(\"tls\");\nconst errors_1 = require(\"../errors\");\nconst utils_1 = require(\"../utils\");\nclass RedisSocket extends events_1.EventEmitter {\n    constructor(initiator, options) {\n        super();\n        _RedisSocket_instances.add(this);\n        _RedisSocket_initiator.set(this, void 0);\n        _RedisSocket_options.set(this, void 0);\n        _RedisSocket_socket.set(this, void 0);\n        _RedisSocket_isOpen.set(this, false);\n        _RedisSocket_isReady.set(this, false);\n        // `writable.writableNeedDrain` was added in v15.2.0 and therefore can't be used\n        // https://nodejs.org/api/stream.html#stream_writable_writableneeddrain\n        _RedisSocket_writableNeedDrain.set(this, false);\n        _RedisSocket_isCorked.set(this, false);\n        __classPrivateFieldSet(this, _RedisSocket_initiator, initiator, \"f\");\n        __classPrivateFieldSet(this, _RedisSocket_options, __classPrivateFieldGet(RedisSocket, _a, \"m\", _RedisSocket_initiateOptions).call(RedisSocket, options), \"f\");\n    }\n    get isOpen() {\n        return __classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\");\n    }\n    get isReady() {\n        return __classPrivateFieldGet(this, _RedisSocket_isReady, \"f\");\n    }\n    get writableNeedDrain() {\n        return __classPrivateFieldGet(this, _RedisSocket_writableNeedDrain, \"f\");\n    }\n    async connect() {\n        if (__classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\")) {\n            throw new Error('Socket already opened');\n        }\n        return __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_connect).call(this, 0);\n    }\n    writeCommand(args) {\n        if (!__classPrivateFieldGet(this, _RedisSocket_socket, \"f\")) {\n            throw new errors_1.ClientClosedError();\n        }\n        for (const toWrite of args) {\n            __classPrivateFieldSet(this, _RedisSocket_writableNeedDrain, !__classPrivateFieldGet(this, _RedisSocket_socket, \"f\").write(toWrite), \"f\");\n        }\n    }\n    disconnect() {\n        if (!__classPrivateFieldGet(this, _RedisSocket_socket, \"f\")) {\n            throw new errors_1.ClientClosedError();\n        }\n        else {\n            __classPrivateFieldSet(this, _RedisSocket_isOpen, __classPrivateFieldSet(this, _RedisSocket_isReady, false, \"f\"), \"f\");\n        }\n        __classPrivateFieldGet(this, _RedisSocket_socket, \"f\").destroy();\n        __classPrivateFieldSet(this, _RedisSocket_socket, undefined, \"f\");\n        this.emit('end');\n    }\n    async quit(fn) {\n        if (!__classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\")) {\n            throw new errors_1.ClientClosedError();\n        }\n        __classPrivateFieldSet(this, _RedisSocket_isOpen, false, \"f\");\n        await fn();\n        this.disconnect();\n    }\n    cork() {\n        if (!__classPrivateFieldGet(this, _RedisSocket_socket, \"f\") || __classPrivateFieldGet(this, _RedisSocket_isCorked, \"f\")) {\n            return;\n        }\n        __classPrivateFieldGet(this, _RedisSocket_socket, \"f\").cork();\n        __classPrivateFieldSet(this, _RedisSocket_isCorked, true, \"f\");\n        queueMicrotask(() => {\n            __classPrivateFieldGet(this, _RedisSocket_socket, \"f\")?.uncork();\n            __classPrivateFieldSet(this, _RedisSocket_isCorked, false, \"f\");\n        });\n    }\n}\nexports.default = RedisSocket;\n_a = RedisSocket, _RedisSocket_initiator = new WeakMap(), _RedisSocket_options = new WeakMap(), _RedisSocket_socket = new WeakMap(), _RedisSocket_isOpen = new WeakMap(), _RedisSocket_isReady = new WeakMap(), _RedisSocket_writableNeedDrain = new WeakMap(), _RedisSocket_isCorked = new WeakMap(), _RedisSocket_instances = new WeakSet(), _RedisSocket_initiateOptions = function _RedisSocket_initiateOptions(options) {\n    var _b, _c;\n    options ?? (options = {});\n    if (!options.path) {\n        (_b = options).port ?? (_b.port = 6379);\n        (_c = options).host ?? (_c.host = 'localhost');\n    }\n    options.connectTimeout ?? (options.connectTimeout = 5000);\n    options.keepAlive ?? (options.keepAlive = 5000);\n    options.noDelay ?? (options.noDelay = true);\n    return options;\n}, _RedisSocket_defaultReconnectStrategy = function _RedisSocket_defaultReconnectStrategy(retries) {\n    return Math.min(retries * 50, 500);\n}, _RedisSocket_isTlsSocket = function _RedisSocket_isTlsSocket(options) {\n    return options.tls === true;\n}, _RedisSocket_connect = async function _RedisSocket_connect(retries, hadError) {\n    if (retries > 0 || hadError) {\n        this.emit('reconnecting');\n    }\n    try {\n        __classPrivateFieldSet(this, _RedisSocket_isOpen, true, \"f\");\n        __classPrivateFieldSet(this, _RedisSocket_socket, await __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_createSocket).call(this), \"f\");\n        __classPrivateFieldSet(this, _RedisSocket_writableNeedDrain, false, \"f\");\n        this.emit('connect');\n        try {\n            await __classPrivateFieldGet(this, _RedisSocket_initiator, \"f\").call(this);\n        }\n        catch (err) {\n            __classPrivateFieldGet(this, _RedisSocket_socket, \"f\").destroy();\n            __classPrivateFieldSet(this, _RedisSocket_socket, undefined, \"f\");\n            throw err;\n        }\n        __classPrivateFieldSet(this, _RedisSocket_isReady, true, \"f\");\n        this.emit('ready');\n    }\n    catch (err) {\n        this.emit('error', err);\n        const retryIn = (__classPrivateFieldGet(this, _RedisSocket_options, \"f\")?.reconnectStrategy ?? __classPrivateFieldGet(RedisSocket, _a, \"m\", _RedisSocket_defaultReconnectStrategy))(retries);\n        if (retryIn instanceof Error) {\n            __classPrivateFieldSet(this, _RedisSocket_isOpen, false, \"f\");\n            throw new errors_1.ReconnectStrategyError(retryIn, err);\n        }\n        await (0, utils_1.promiseTimeout)(retryIn);\n        return __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_connect).call(this, retries + 1);\n    }\n}, _RedisSocket_createSocket = function _RedisSocket_createSocket() {\n    return new Promise((resolve, reject) => {\n        const { connectEvent, socket } = __classPrivateFieldGet(RedisSocket, _a, \"m\", _RedisSocket_isTlsSocket).call(RedisSocket, __classPrivateFieldGet(this, _RedisSocket_options, \"f\")) ?\n            __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_createTlsSocket).call(this) :\n            __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_createNetSocket).call(this);\n        if (__classPrivateFieldGet(this, _RedisSocket_options, \"f\").connectTimeout) {\n            socket.setTimeout(__classPrivateFieldGet(this, _RedisSocket_options, \"f\").connectTimeout, () => socket.destroy(new errors_1.ConnectionTimeoutError()));\n        }\n        socket\n            .setNoDelay(__classPrivateFieldGet(this, _RedisSocket_options, \"f\").noDelay)\n            .once('error', reject)\n            .once(connectEvent, () => {\n            socket\n                .setTimeout(0)\n                // https://github.com/nodejs/node/issues/31663\n                .setKeepAlive(__classPrivateFieldGet(this, _RedisSocket_options, \"f\").keepAlive !== false, __classPrivateFieldGet(this, _RedisSocket_options, \"f\").keepAlive || 0)\n                .off('error', reject)\n                .once('error', (err) => __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_onSocketError).call(this, err))\n                .once('close', hadError => {\n                if (!hadError && __classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\") && __classPrivateFieldGet(this, _RedisSocket_socket, \"f\") === socket) {\n                    __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_onSocketError).call(this, new errors_1.SocketClosedUnexpectedlyError());\n                }\n            })\n                .on('drain', () => {\n                __classPrivateFieldSet(this, _RedisSocket_writableNeedDrain, false, \"f\");\n                this.emit('drain');\n            })\n                .on('data', data => this.emit('data', data));\n            resolve(socket);\n        });\n    });\n}, _RedisSocket_createNetSocket = function _RedisSocket_createNetSocket() {\n    return {\n        connectEvent: 'connect',\n        socket: net.connect(__classPrivateFieldGet(this, _RedisSocket_options, \"f\")) // TODO\n    };\n}, _RedisSocket_createTlsSocket = function _RedisSocket_createTlsSocket() {\n    return {\n        connectEvent: 'secureConnect',\n        socket: tls.connect(__classPrivateFieldGet(this, _RedisSocket_options, \"f\")) // TODO\n    };\n}, _RedisSocket_onSocketError = function _RedisSocket_onSocketError(err) {\n    __classPrivateFieldSet(this, _RedisSocket_isReady, false, \"f\");\n    this.emit('error', err);\n    __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_connect).call(this, 0, true).catch(() => {\n        // the error was already emitted, silently ignore it\n    });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}