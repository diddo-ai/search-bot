{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nates\\\\Pro\\\\anagrams\\\\src\\\\App.js\";\nimport typewriter from './typewriter.png';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: typewriter,\n          className: \"typewriter\",\n          alt: \"logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Search for Anagrams\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"search\",\n        className: \"searchField\",\n        placeholder: \"enter word or letters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        className: \"myButton\",\n        value: \"Search\",\n        onClick: handleClickOnGenerateButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"searchFor\",\n        className: \"searchFor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"anagramsResults\",\n        className: \"anagramResults\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nconst handleClickOnGenerateButton = async () => {\n  await searchAnagrams();\n\n  // in case the backend is unresponsive, use this local map\n  let localAnagramMap = new Map();\n  localAnagramMap.set('dstuy', ['dusty', 'study']);\n  localAnagramMap.set('eilv', ['live', 'evil']);\n  let searchFor = document.getElementById('search').value;\n  let sortedWordKey = searchFor.split('').sort().join('').toLowerCase();\n  document.getElementById('searchFor').innerHTML = \"searching...\";\n\n  //const responseFromBackend = await fetch(\"http://localhost:3000/?word=\" + searchFor);\n  //const anagramsJSON = await responseFromBackend.json();\n  //output = anagramsJSON.anagramsResults;\n\n  // fetch with a timeout of 10 seconds\n  //const controller = new AbortController();\n  //const timeout = setTimeout(() => { controller.abort(); }, 10000);\n  //const responseFromBackend = await fetch(\"http://localhost:3000/?word=\" + searchFor, { signal: controller.signal });\n\n  //fuzzy match one letter\n  sortedWordKey += \"u\";\n  sortedWordKey = sortedWordKey.split('').sort().join('').toLowerCase();\n\n  //let output = localAnagramMap.get(sortedWordKey) || 'no anagrams found';\n  let output = (await searchAnagrams(sortedWordKey)) || 'no anagrams found';\n\n  // the view is responsible for formatting the output\n  output = styleOutput(output);\n  document.getElementById('anagramsResults').innerHTML = output;\n  document.getElementById('searchFor').innerHTML = \"search for: \" + searchFor;\n};\nasync function searchAnagrams(key) {\n  let sources = [];\n  let map = new Map();\n  // easy to extend to multiple sources and serves as cache\n  sources.push(\"http://localhost:3000/anagrams/anagramMap.txt\");\n  sources.push(\"http://localhost:3000/anagrams/anagramMap.sample.txt\");\n  sources.push(\"http://localhost:3000/\");\n  sources.forEach(async source => {\n    try {\n      let anagramFile = await fetch(source);\n      let txt = await anagramFile.text();\n      map = buildMap(txt);\n      let count = map.size;\n      console.log;\n    } catch (err) {\n      console.log(err);\n    }\n  });\n  return map.get(key);\n}\nfunction buildMap(txt) {\n  let anagramMap = new Map();\n  let lines = txt.split(\"\\n\");\n  lines.forEach(line => {\n    let key = line.split(\",\")[0];\n    let anagrams = line.split(\",\").slice(1);\n    anagramMap.set(key, anagrams);\n  });\n  return anagramMap;\n}\nfunction styleOutput(input) {\n  return input.toString().replace(/,([a-z])/gi, ', $1'); // space after commas\n}\n\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["typewriter","jsxDEV","_jsxDEV","App","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","id","placeholder","type","value","onClick","handleClickOnGenerateButton","_c","searchAnagrams","localAnagramMap","Map","set","searchFor","document","getElementById","sortedWordKey","split","sort","join","toLowerCase","innerHTML","output","styleOutput","key","sources","map","push","forEach","source","anagramFile","fetch","txt","text","buildMap","count","size","console","log","err","get","anagramMap","lines","line","anagrams","slice","input","toString","replace","$RefreshReg$"],"sources":["C:/Users/nates/Pro/anagrams/src/App.js"],"sourcesContent":["import typewriter from './typewriter.png';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <div className=\"container\">\r\n        <img src={typewriter} className=\"typewriter\" alt=\"logo\" />\r\n        </div>\r\n        <p>Search for Anagrams</p>\r\n        <input\r\n          id=\"search\"\r\n          className=\"searchField\"\r\n          placeholder=\"enter word or letters\"\r\n        ></input>\r\n        <input\r\n          type=\"submit\"\r\n          className=\"myButton\"\r\n          value=\"Search\"\r\n          onClick={handleClickOnGenerateButton}\r\n        ></input>\r\n        <p id=\"searchFor\" className=\"searchFor\"></p>\r\n        <p id=\"anagramsResults\" className=\"anagramResults\"></p>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst handleClickOnGenerateButton = async () => {\r\n\r\n  await searchAnagrams()\r\n\r\n  // in case the backend is unresponsive, use this local map\r\n  let localAnagramMap = new Map();\r\n  localAnagramMap.set('dstuy', ['dusty', 'study']);\r\n  localAnagramMap.set('eilv', ['live', 'evil']);\r\n\r\n  let searchFor = document.getElementById('search').value;\r\n  let sortedWordKey = searchFor.split('').sort().join('').toLowerCase();\r\n  document.getElementById('searchFor').innerHTML = \"searching...\"\r\n\r\n  //const responseFromBackend = await fetch(\"http://localhost:3000/?word=\" + searchFor);\r\n  //const anagramsJSON = await responseFromBackend.json();\r\n  //output = anagramsJSON.anagramsResults;\r\n\r\n  // fetch with a timeout of 10 seconds\r\n  //const controller = new AbortController();\r\n  //const timeout = setTimeout(() => { controller.abort(); }, 10000);\r\n  //const responseFromBackend = await fetch(\"http://localhost:3000/?word=\" + searchFor, { signal: controller.signal });\r\n\r\n\r\n  //fuzzy match one letter\r\n  sortedWordKey += \"u\"\r\n  sortedWordKey = sortedWordKey.split('').sort().join('').toLowerCase();\r\n\r\n  //let output = localAnagramMap.get(sortedWordKey) || 'no anagrams found';\r\n  let output = await searchAnagrams(sortedWordKey) || 'no anagrams found';\r\n\r\n  // the view is responsible for formatting the output\r\n  output = styleOutput(output);\r\n\r\n  document.getElementById('anagramsResults').innerHTML = output;\r\n  document.getElementById('searchFor').innerHTML = \"search for: \" + searchFor;\r\n}\r\n\r\nasync function searchAnagrams(key) {\r\n  let sources = [];\r\n  let map = new Map();\r\n  // easy to extend to multiple sources and serves as cache\r\n  sources.push(\"http://localhost:3000/anagrams/anagramMap.txt\");\r\n  sources.push(\"http://localhost:3000/anagrams/anagramMap.sample.txt\");\r\n  sources.push(\"http://localhost:3000/\");\r\n\r\n  sources.forEach(async (source) => {\r\n    try {\r\n      let anagramFile = await fetch(source);\r\n      let txt = await anagramFile.text();\r\n      map = buildMap(txt); \r\n      let count = map.size;\r\n      console.log\r\n    } \r\n      catch (err) {\r\n      console.log(err);\r\n    }\r\n  });\r\n\r\n  return map.get(key);\r\n}\r\n\r\nfunction buildMap (txt) {\r\n  let anagramMap = new Map();\r\n  let lines = txt.split(\"\\n\");\r\n  lines.forEach(line => {\r\n    let key = line.split(\",\")[0];\r\n    let anagrams = line.split(\",\").slice(1);\r\n    anagramMap.set(key, anagrams);\r\n  });\r\n  return anagramMap;\r\n}\r\n\r\nfunction styleOutput(input) {\r\n  return input.toString().replace(/,([a-z])/gi, ', $1'); // space after commas\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}