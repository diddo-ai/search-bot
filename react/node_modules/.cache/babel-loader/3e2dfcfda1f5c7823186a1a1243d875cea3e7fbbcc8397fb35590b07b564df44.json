{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transformReply = exports.pushAggregatehOptions = exports.transformArguments = exports.AggregateGroupByReducers = exports.AggregateSteps = void 0;\nconst generic_transformers_1 = require(\"@redis/client/dist/lib/commands/generic-transformers\");\nconst _1 = require(\".\");\nvar AggregateSteps;\n(function (AggregateSteps) {\n  AggregateSteps[\"GROUPBY\"] = \"GROUPBY\";\n  AggregateSteps[\"SORTBY\"] = \"SORTBY\";\n  AggregateSteps[\"APPLY\"] = \"APPLY\";\n  AggregateSteps[\"LIMIT\"] = \"LIMIT\";\n  AggregateSteps[\"FILTER\"] = \"FILTER\";\n})(AggregateSteps = exports.AggregateSteps || (exports.AggregateSteps = {}));\nvar AggregateGroupByReducers;\n(function (AggregateGroupByReducers) {\n  AggregateGroupByReducers[\"COUNT\"] = \"COUNT\";\n  AggregateGroupByReducers[\"COUNT_DISTINCT\"] = \"COUNT_DISTINCT\";\n  AggregateGroupByReducers[\"COUNT_DISTINCTISH\"] = \"COUNT_DISTINCTISH\";\n  AggregateGroupByReducers[\"SUM\"] = \"SUM\";\n  AggregateGroupByReducers[\"MIN\"] = \"MIN\";\n  AggregateGroupByReducers[\"MAX\"] = \"MAX\";\n  AggregateGroupByReducers[\"AVG\"] = \"AVG\";\n  AggregateGroupByReducers[\"STDDEV\"] = \"STDDEV\";\n  AggregateGroupByReducers[\"QUANTILE\"] = \"QUANTILE\";\n  AggregateGroupByReducers[\"TOLIST\"] = \"TOLIST\";\n  AggregateGroupByReducers[\"TO_LIST\"] = \"TOLIST\";\n  AggregateGroupByReducers[\"FIRST_VALUE\"] = \"FIRST_VALUE\";\n  AggregateGroupByReducers[\"RANDOM_SAMPLE\"] = \"RANDOM_SAMPLE\";\n})(AggregateGroupByReducers = exports.AggregateGroupByReducers || (exports.AggregateGroupByReducers = {}));\nfunction transformArguments(index, query, options) {\n  return pushAggregatehOptions(['FT.AGGREGATE', index, query], options);\n}\nexports.transformArguments = transformArguments;\nfunction pushAggregatehOptions(args, options) {\n  if (options?.VERBATIM) {\n    args.push('VERBATIM');\n  }\n  if (options?.LOAD) {\n    args.push('LOAD');\n    (0, _1.pushArgumentsWithLength)(args, () => {\n      if (Array.isArray(options.LOAD)) {\n        for (const load of options.LOAD) {\n          pushLoadField(args, load);\n        }\n      } else {\n        pushLoadField(args, options.LOAD);\n      }\n    });\n  }\n  if (options?.STEPS) {\n    for (const step of options.STEPS) {\n      switch (step.type) {\n        case AggregateSteps.GROUPBY:\n          args.push('GROUPBY');\n          if (!step.properties) {\n            args.push('0');\n          } else {\n            (0, generic_transformers_1.pushVerdictArgument)(args, step.properties);\n          }\n          if (Array.isArray(step.REDUCE)) {\n            for (const reducer of step.REDUCE) {\n              pushGroupByReducer(args, reducer);\n            }\n          } else {\n            pushGroupByReducer(args, step.REDUCE);\n          }\n          break;\n        case AggregateSteps.SORTBY:\n          (0, _1.pushSortByArguments)(args, 'SORTBY', step.BY);\n          if (step.MAX) {\n            args.push('MAX', step.MAX.toString());\n          }\n          break;\n        case AggregateSteps.APPLY:\n          args.push('APPLY', step.expression, 'AS', step.AS);\n          break;\n        case AggregateSteps.LIMIT:\n          args.push('LIMIT', step.from.toString(), step.size.toString());\n          break;\n        case AggregateSteps.FILTER:\n          args.push('FILTER', step.expression);\n          break;\n      }\n    }\n  }\n  (0, _1.pushParamsArgs)(args, options?.PARAMS);\n  if (options?.DIALECT) {\n    args.push('DIALECT', options.DIALECT.toString());\n  }\n  return args;\n}\nexports.pushAggregatehOptions = pushAggregatehOptions;\nfunction pushLoadField(args, toLoad) {\n  if (typeof toLoad === 'string') {\n    args.push(toLoad);\n  } else {\n    args.push(toLoad.identifier);\n    if (toLoad.AS) {\n      args.push('AS', toLoad.AS);\n    }\n  }\n}\nfunction pushGroupByReducer(args, reducer) {\n  args.push('REDUCE', reducer.type);\n  switch (reducer.type) {\n    case AggregateGroupByReducers.COUNT:\n      args.push('0');\n      break;\n    case AggregateGroupByReducers.COUNT_DISTINCT:\n    case AggregateGroupByReducers.COUNT_DISTINCTISH:\n    case AggregateGroupByReducers.SUM:\n    case AggregateGroupByReducers.MIN:\n    case AggregateGroupByReducers.MAX:\n    case AggregateGroupByReducers.AVG:\n    case AggregateGroupByReducers.STDDEV:\n    case AggregateGroupByReducers.TOLIST:\n      args.push('1', reducer.property);\n      break;\n    case AggregateGroupByReducers.QUANTILE:\n      args.push('2', reducer.property, reducer.quantile.toString());\n      break;\n    case AggregateGroupByReducers.FIRST_VALUE:\n      {\n        (0, _1.pushArgumentsWithLength)(args, () => {\n          args.push(reducer.property);\n          if (reducer.BY) {\n            args.push('BY');\n            if (typeof reducer.BY === 'string') {\n              args.push(reducer.BY);\n            } else {\n              args.push(reducer.BY.property);\n              if (reducer.BY.direction) {\n                args.push(reducer.BY.direction);\n              }\n            }\n          }\n        });\n        break;\n      }\n    case AggregateGroupByReducers.RANDOM_SAMPLE:\n      args.push('2', reducer.property, reducer.sampleSize.toString());\n      break;\n  }\n  if (reducer.AS) {\n    args.push('AS', reducer.AS);\n  }\n}\nfunction transformReply(rawReply) {\n  const results = [];\n  for (let i = 1; i < rawReply.length; i++) {\n    results.push((0, generic_transformers_1.transformTuplesReply)(rawReply[i]));\n  }\n  return {\n    total: rawReply[0],\n    results\n  };\n}\nexports.transformReply = transformReply;","map":{"version":3,"names":["Object","defineProperty","exports","value","transformReply","pushAggregatehOptions","transformArguments","AggregateGroupByReducers","AggregateSteps","generic_transformers_1","require","_1","index","query","options","args","VERBATIM","push","LOAD","pushArgumentsWithLength","Array","isArray","load","pushLoadField","STEPS","step","type","GROUPBY","properties","pushVerdictArgument","REDUCE","reducer","pushGroupByReducer","SORTBY","pushSortByArguments","BY","MAX","toString","APPLY","expression","AS","LIMIT","from","size","FILTER","pushParamsArgs","PARAMS","DIALECT","toLoad","identifier","COUNT","COUNT_DISTINCT","COUNT_DISTINCTISH","SUM","MIN","AVG","STDDEV","TOLIST","property","QUANTILE","quantile","FIRST_VALUE","direction","RANDOM_SAMPLE","sampleSize","rawReply","results","i","length","transformTuplesReply","total"],"sources":["C:/Users/nates/Pro/anagrams/node_modules/@redis/search/dist/commands/AGGREGATE.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.transformReply = exports.pushAggregatehOptions = exports.transformArguments = exports.AggregateGroupByReducers = exports.AggregateSteps = void 0;\nconst generic_transformers_1 = require(\"@redis/client/dist/lib/commands/generic-transformers\");\nconst _1 = require(\".\");\nvar AggregateSteps;\n(function (AggregateSteps) {\n    AggregateSteps[\"GROUPBY\"] = \"GROUPBY\";\n    AggregateSteps[\"SORTBY\"] = \"SORTBY\";\n    AggregateSteps[\"APPLY\"] = \"APPLY\";\n    AggregateSteps[\"LIMIT\"] = \"LIMIT\";\n    AggregateSteps[\"FILTER\"] = \"FILTER\";\n})(AggregateSteps = exports.AggregateSteps || (exports.AggregateSteps = {}));\nvar AggregateGroupByReducers;\n(function (AggregateGroupByReducers) {\n    AggregateGroupByReducers[\"COUNT\"] = \"COUNT\";\n    AggregateGroupByReducers[\"COUNT_DISTINCT\"] = \"COUNT_DISTINCT\";\n    AggregateGroupByReducers[\"COUNT_DISTINCTISH\"] = \"COUNT_DISTINCTISH\";\n    AggregateGroupByReducers[\"SUM\"] = \"SUM\";\n    AggregateGroupByReducers[\"MIN\"] = \"MIN\";\n    AggregateGroupByReducers[\"MAX\"] = \"MAX\";\n    AggregateGroupByReducers[\"AVG\"] = \"AVG\";\n    AggregateGroupByReducers[\"STDDEV\"] = \"STDDEV\";\n    AggregateGroupByReducers[\"QUANTILE\"] = \"QUANTILE\";\n    AggregateGroupByReducers[\"TOLIST\"] = \"TOLIST\";\n    AggregateGroupByReducers[\"TO_LIST\"] = \"TOLIST\";\n    AggregateGroupByReducers[\"FIRST_VALUE\"] = \"FIRST_VALUE\";\n    AggregateGroupByReducers[\"RANDOM_SAMPLE\"] = \"RANDOM_SAMPLE\";\n})(AggregateGroupByReducers = exports.AggregateGroupByReducers || (exports.AggregateGroupByReducers = {}));\nfunction transformArguments(index, query, options) {\n    return pushAggregatehOptions(['FT.AGGREGATE', index, query], options);\n}\nexports.transformArguments = transformArguments;\nfunction pushAggregatehOptions(args, options) {\n    if (options?.VERBATIM) {\n        args.push('VERBATIM');\n    }\n    if (options?.LOAD) {\n        args.push('LOAD');\n        (0, _1.pushArgumentsWithLength)(args, () => {\n            if (Array.isArray(options.LOAD)) {\n                for (const load of options.LOAD) {\n                    pushLoadField(args, load);\n                }\n            }\n            else {\n                pushLoadField(args, options.LOAD);\n            }\n        });\n    }\n    if (options?.STEPS) {\n        for (const step of options.STEPS) {\n            switch (step.type) {\n                case AggregateSteps.GROUPBY:\n                    args.push('GROUPBY');\n                    if (!step.properties) {\n                        args.push('0');\n                    }\n                    else {\n                        (0, generic_transformers_1.pushVerdictArgument)(args, step.properties);\n                    }\n                    if (Array.isArray(step.REDUCE)) {\n                        for (const reducer of step.REDUCE) {\n                            pushGroupByReducer(args, reducer);\n                        }\n                    }\n                    else {\n                        pushGroupByReducer(args, step.REDUCE);\n                    }\n                    break;\n                case AggregateSteps.SORTBY:\n                    (0, _1.pushSortByArguments)(args, 'SORTBY', step.BY);\n                    if (step.MAX) {\n                        args.push('MAX', step.MAX.toString());\n                    }\n                    break;\n                case AggregateSteps.APPLY:\n                    args.push('APPLY', step.expression, 'AS', step.AS);\n                    break;\n                case AggregateSteps.LIMIT:\n                    args.push('LIMIT', step.from.toString(), step.size.toString());\n                    break;\n                case AggregateSteps.FILTER:\n                    args.push('FILTER', step.expression);\n                    break;\n            }\n        }\n    }\n    (0, _1.pushParamsArgs)(args, options?.PARAMS);\n    if (options?.DIALECT) {\n        args.push('DIALECT', options.DIALECT.toString());\n    }\n    return args;\n}\nexports.pushAggregatehOptions = pushAggregatehOptions;\nfunction pushLoadField(args, toLoad) {\n    if (typeof toLoad === 'string') {\n        args.push(toLoad);\n    }\n    else {\n        args.push(toLoad.identifier);\n        if (toLoad.AS) {\n            args.push('AS', toLoad.AS);\n        }\n    }\n}\nfunction pushGroupByReducer(args, reducer) {\n    args.push('REDUCE', reducer.type);\n    switch (reducer.type) {\n        case AggregateGroupByReducers.COUNT:\n            args.push('0');\n            break;\n        case AggregateGroupByReducers.COUNT_DISTINCT:\n        case AggregateGroupByReducers.COUNT_DISTINCTISH:\n        case AggregateGroupByReducers.SUM:\n        case AggregateGroupByReducers.MIN:\n        case AggregateGroupByReducers.MAX:\n        case AggregateGroupByReducers.AVG:\n        case AggregateGroupByReducers.STDDEV:\n        case AggregateGroupByReducers.TOLIST:\n            args.push('1', reducer.property);\n            break;\n        case AggregateGroupByReducers.QUANTILE:\n            args.push('2', reducer.property, reducer.quantile.toString());\n            break;\n        case AggregateGroupByReducers.FIRST_VALUE: {\n            (0, _1.pushArgumentsWithLength)(args, () => {\n                args.push(reducer.property);\n                if (reducer.BY) {\n                    args.push('BY');\n                    if (typeof reducer.BY === 'string') {\n                        args.push(reducer.BY);\n                    }\n                    else {\n                        args.push(reducer.BY.property);\n                        if (reducer.BY.direction) {\n                            args.push(reducer.BY.direction);\n                        }\n                    }\n                }\n            });\n            break;\n        }\n        case AggregateGroupByReducers.RANDOM_SAMPLE:\n            args.push('2', reducer.property, reducer.sampleSize.toString());\n            break;\n    }\n    if (reducer.AS) {\n        args.push('AS', reducer.AS);\n    }\n}\nfunction transformReply(rawReply) {\n    const results = [];\n    for (let i = 1; i < rawReply.length; i++) {\n        results.push((0, generic_transformers_1.transformTuplesReply)(rawReply[i]));\n    }\n    return {\n        total: rawReply[0],\n        results\n    };\n}\nexports.transformReply = transformReply;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}