{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nates\\\\Pro\\\\anagrams\\\\react\\\\src\\\\App.js\";\nimport typewriter from './typewriter.png';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: typewriter,\n          className: \"typewriter\",\n          alt: \"logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Search for Anagrams\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"search\",\n        className: \"searchField\",\n        placeholder: \"enter word or letters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        className: \"myButton\",\n        value: \"Search\",\n        onClick: handleClickOnGenerateButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"searchFor\",\n        className: \"searchFor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"anagramsResults\",\n        className: \"anagramResults\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"https://react.dev/\",\n        className: \"\",\n        children: \"Built on ReactJS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nconst handleClickOnGenerateButton = async () => {\n  let sortedWordKey;\n  try {\n    let anagram = new Anagram();\n    let localAnagramMap = anagram.anagramMap;\n    let searchFor = document.getElementById('search').value;\n    sortedWordKey = sortWordKey(searchFor);\n    document.getElementById('searchFor').innerHTML = \"searching...\";\n\n    //fuzzy match one letter\n    //sortedWordKey += \"u\"\n    //sortedWordKey = sortWordKey(sortedWordKey);\n\n    let anagramResults = localAnagramMap.get(sortedWordKey) || 'no anagrams found';\n\n    // the view is responsible for formatting the output\n    anagramResults = styleOutput(anagramResults);\n    document.getElementById('anagramsResults').innerHTML = anagramResults;\n    document.getElementById('searchFor').innerHTML = \"search for: \" + searchFor;\n  } catch (err) {\n    let line = err.stack.split('\\n')[1];\n    console.log(`Error: ${err} at ${line}`);\n  }\n};\nfunction sortWordKey(word) {\n  return word.split('').sort().join('').toLowerCase();\n}\nasync function loadAnagramsToTxt() {\n  let text = \"\";\n  let sources = [];\n  // easy to extend\n  sources.push(\"http://localhost:3000/anagrams/anagramMap.sample.txt\");\n  sources.push(\"http://localhost:3000/anagrams/anagramMap.txt\");\n  sources.push(\"http://localhost:3000/\");\n  sources.forEach(async function (source) {\n    try {\n      let response = await fetch(source);\n      text = await response.text();\n    } catch (err) {\n      console.log(`Error fetching ${source}: ${err}`);\n    }\n  });\n  return text;\n}\nfunction fileTxtToHashMap(txt) {\n  let anagramMap = new Map();\n  let anagrams = txt.split('\\n');\n  anagrams.forEach(function (anagram) {\n    try {\n      vals = anagram.split(',');\n      anagramMap.set(vals[0], vals.slice(1));\n    } catch (err) {\n      console.log(`Error parsing ${anagram}: ${err}`);\n    }\n  });\n  return anagramMap;\n}\nfunction styleOutput(input) {\n  return input.toString().replace(/,([a-z])/gi, ', $1'); // space after commas\n}\n\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["typewriter","jsxDEV","_jsxDEV","App","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","id","placeholder","type","value","onClick","handleClickOnGenerateButton","href","_c","sortedWordKey","anagram","Anagram","localAnagramMap","anagramMap","searchFor","document","getElementById","sortWordKey","innerHTML","anagramResults","get","styleOutput","err","line","stack","split","console","log","word","sort","join","toLowerCase","loadAnagramsToTxt","text","sources","push","forEach","source","response","fetch","fileTxtToHashMap","txt","Map","anagrams","vals","set","slice","input","toString","replace","$RefreshReg$"],"sources":["C:/Users/nates/Pro/anagrams/react/src/App.js"],"sourcesContent":["import typewriter from './typewriter.png';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <div className=\"container\">\r\n        <img src={typewriter} className=\"typewriter\" alt=\"logo\" />\r\n        </div>\r\n        <p>Search for Anagrams</p>\r\n        <input\r\n          id=\"search\"\r\n          className=\"searchField\"\r\n          placeholder=\"enter word or letters\"\r\n        ></input>\r\n        <input\r\n          type=\"submit\"\r\n          className=\"myButton\"\r\n          value=\"Search\"\r\n          onClick={handleClickOnGenerateButton}\r\n        ></input>\r\n        <p id=\"searchFor\" className=\"searchFor\"></p>\r\n        <p id=\"anagramsResults\" className=\"anagramResults\"></p>\r\n        <a href='https://react.dev/' className=\"\">Built on ReactJS</a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst handleClickOnGenerateButton = async () => {\r\n  let sortedWordKey;\r\n\r\n  try {\r\n  let anagram = new Anagram();\r\n  let localAnagramMap = anagram.anagramMap;\r\n\r\n  let searchFor = document.getElementById('search').value;\r\n  sortedWordKey = sortWordKey(searchFor);\r\n  document.getElementById('searchFor').innerHTML = \"searching...\"\r\n\r\n  //fuzzy match one letter\r\n  //sortedWordKey += \"u\"\r\n  //sortedWordKey = sortWordKey(sortedWordKey);\r\n\r\n  let anagramResults = localAnagramMap.get(sortedWordKey) || 'no anagrams found';\r\n\r\n  // the view is responsible for formatting the output\r\n  anagramResults = styleOutput(anagramResults);\r\n\r\n  document.getElementById('anagramsResults').innerHTML = anagramResults;\r\n  document.getElementById('searchFor').innerHTML = \"search for: \" + searchFor;\r\n  } catch (err) {\r\n    let line = err.stack.split('\\n')[1];\r\n    console.log(`Error: ${err} at ${line}`);\r\n  }\r\n}\r\n\r\nfunction sortWordKey(word) {\r\n  return word.split('').sort().join('').toLowerCase();\r\n}\r\n\r\nasync function loadAnagramsToTxt() {\r\n  let text = \"\";\r\n  let sources = [];\r\n  // easy to extend\r\n  sources.push(\"http://localhost:3000/anagrams/anagramMap.sample.txt\");\r\n  sources.push(\"http://localhost:3000/anagrams/anagramMap.txt\");\r\n  sources.push(\"http://localhost:3000/\");\r\n\r\n  sources.forEach(async function (source) {\r\n    try {\r\n      let response = await fetch(source);\r\n      text = await response.text();\r\n    } catch (err) {\r\n      console.log(`Error fetching ${source}: ${err}`);\r\n    }\r\n  });\r\n  return text;\r\n}\r\n\r\nfunction fileTxtToHashMap(txt) {\r\n  let anagramMap = new Map();\r\n  let anagrams = txt.split('\\n');\r\n  anagrams.forEach(function (anagram) {\r\n    try {\r\n      vals = anagram.split(',');\r\n      anagramMap.set(vals[0], vals.slice(1));\r\n    } catch (err) {\r\n      console.log(`Error parsing ${anagram}: ${err}`);\r\n    }\r\n    \r\n  });\r\n  return anagramMap;\r\n}\r\n\r\nfunction styleOutput(input) {\r\n  return input.toString().replace(/,([a-z])/gi, ', $1'); // space after commas\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}