{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nates\\\\Pro\\\\anagrams\\\\src\\\\App.js\";\nimport './App.css';\nimport anagramMap from './anagramMap.txt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"typewriter\",\n          src: \"typewriter.png\",\n          alt: \"typewriter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Search for Anagrams\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"search\",\n        className: \"searchField\",\n        placeholder: \"enter word or letters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        className: \"myButton\",\n        value: \"Search\",\n        onClick: handleClickOnGenerateButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"searchFor\",\n        className: \"searchFor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"anagramsResults\",\n        className: \"anagramResults\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nconst handleClickOnGenerateButton = async () => {\n  console.log(anagramMap);\n  $.get('/docs/file.txt', {}, function (content) {\n    let lines = content.split('\\n');\n    console.log(`\"file.txt\" contains ${lines.length} lines`);\n    console.log(`First line : ${lines[0]}`);\n  });\n\n  // in case the backend is unresponsive, use this local map\n  let localAnagramMap = new Map();\n  localAnagramMap.set('dstuy', ['dusty', 'study']);\n  localAnagramMap.set('eilv', ['live', 'evil']);\n  let searchFor = document.getElementById('search').value;\n  let sortedWordKey = searchFor.split('').sort().join('').toLowerCase();\n  document.getElementById('searchFor').innerHTML = \"searching...\";\n\n  //const responseFromBackend = await fetch(\"http://localhost:3000/?word=\" + searchFor);\n  //const anagramsJSON = await responseFromBackend.json();\n  //output = anagramsJSON.anagramsResults;\n\n  // fetch with a timeout of 10 seconds\n  //const controller = new AbortController();\n  //const timeout = setTimeout(() => { controller.abort(); }, 10000);\n  //const responseFromBackend = await fetch(\"http://localhost:3000/?word=\" + searchFor, { signal: controller.signal });\n\n  //fuzzy match one letter\n  sortedWordKey += \"u\";\n  sortedWordKey = sortedWordKey.split('').sort().join('').toLowerCase();\n  let output = localAnagramMap.get(sortedWordKey) || 'no anagrams found';\n\n  // the view is responsible for formatting the output\n  output = styleOutput(output);\n  document.getElementById('anagramsResults').innerHTML = output;\n  document.getElementById('searchFor').innerHTML = \"search for: \" + searchFor;\n};\nfunction styleOutput(input) {\n  return input.toString().replace(/,([a-z])/gi, ', $1'); // space after commas\n}\n\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["anagramMap","jsxDEV","_jsxDEV","App","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","id","placeholder","type","value","onClick","handleClickOnGenerateButton","_c","console","log","$","get","content","lines","split","length","localAnagramMap","Map","set","searchFor","document","getElementById","sortedWordKey","sort","join","toLowerCase","innerHTML","output","styleOutput","input","toString","replace","$RefreshReg$"],"sources":["C:/Users/nates/Pro/anagrams/src/App.js"],"sourcesContent":["import './App.css';\nimport anagramMap from './anagramMap.txt';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"container\">\n          <img\n            className=\"typewriter\"\n            src=\"typewriter.png\"\n            alt=\"typewriter\"\n          ></img>\n        </div>\n        <p>Search for Anagrams</p>\n        <input\n          id=\"search\"\n          className=\"searchField\"\n          placeholder=\"enter word or letters\"\n        ></input>\n        <input\n          type=\"submit\"\n          className=\"myButton\"\n          value=\"Search\"\n          onClick={handleClickOnGenerateButton}\n        ></input>\n        <p id=\"searchFor\" className=\"searchFor\"></p>\n        <p id=\"anagramsResults\" className=\"anagramResults\"></p>\n      </header>\n    </div>\n  );\n}\n\nconst handleClickOnGenerateButton = async () => {\n\n  console.log(anagramMap)\n\n  $.get('/docs/file.txt',{},function(content){\n      let lines=content.split('\\n');\n\n       console.log(`\"file.txt\" contains ${lines.length} lines`)\n      console.log(`First line : ${lines[0]}`)\n\n});\n\n  // in case the backend is unresponsive, use this local map\n  let localAnagramMap = new Map();\n  localAnagramMap.set('dstuy', ['dusty', 'study']);\n  localAnagramMap.set('eilv', ['live', 'evil']);\n\n  let searchFor = document.getElementById('search').value;\n  let sortedWordKey = searchFor.split('').sort().join('').toLowerCase();\n  document.getElementById('searchFor').innerHTML = \"searching...\"\n\n  //const responseFromBackend = await fetch(\"http://localhost:3000/?word=\" + searchFor);\n  //const anagramsJSON = await responseFromBackend.json();\n  //output = anagramsJSON.anagramsResults;\n\n  // fetch with a timeout of 10 seconds\n  //const controller = new AbortController();\n  //const timeout = setTimeout(() => { controller.abort(); }, 10000);\n  //const responseFromBackend = await fetch(\"http://localhost:3000/?word=\" + searchFor, { signal: controller.signal });\n\n\n  //fuzzy match one letter\n  sortedWordKey += \"u\"\n  sortedWordKey = sortedWordKey.split('').sort().join('').toLowerCase();\n\n  let output = localAnagramMap.get(sortedWordKey) || 'no anagrams found';\n\n  // the view is responsible for formatting the output\n  output = styleOutput(output);\n\n  document.getElementById('anagramsResults').innerHTML = output;\n  document.getElementById('searchFor').innerHTML = \"search for: \" + searchFor;\n}\n\nfunction styleOutput(input) {\n  return input.toString().replace(/,([a-z])/gi, ', $1'); // space after commas\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}