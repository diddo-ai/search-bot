[{"C:\\Users\\nates\\Pro\\anagrams\\react\\src\\index.js":"1","C:\\Users\\nates\\Pro\\anagrams\\react\\src\\App.js":"2","C:\\Users\\nates\\Pro\\anagrams\\react\\src\\reportWebVitals.js":"3","C:\\Users\\nates\\Pro\\anagrams\\react\\src\\lib\\Anagram.ts":"4"},{"size":492,"mtime":1697170063167,"results":"5","hashOfConfig":"6"},{"size":2876,"mtime":1697877004170,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"6"},{"size":4453,"mtime":1697696917998,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"25mgb3",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":11,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":11,"fixableWarningCount":0,"source":null},"C:\\Users\\nates\\Pro\\anagrams\\react\\src\\index.js",[],[],"C:\\Users\\nates\\Pro\\anagrams\\react\\src\\App.js",["22","23","24","25","26","27"],[],"C:\\Users\\nates\\Pro\\anagrams\\react\\src\\reportWebVitals.js",[],[],"C:\\Users\\nates\\Pro\\anagrams\\react\\src\\lib\\Anagram.ts",["28","29","30","31","32","33","34","35","36","37","38","39","40","41","42"],[],{"ruleId":"43","severity":2,"message":"44","line":35,"column":21,"nodeType":"45","messageId":"46","endLine":35,"endColumn":28},{"ruleId":"47","severity":1,"message":"48","line":63,"column":16,"nodeType":"45","messageId":"49","endLine":63,"endColumn":33},{"ruleId":"47","severity":1,"message":"50","line":82,"column":10,"nodeType":"45","messageId":"49","endLine":82,"endColumn":26},{"ruleId":"43","severity":2,"message":"51","line":87,"column":7,"nodeType":"45","messageId":"46","endLine":87,"endColumn":11},{"ruleId":"43","severity":2,"message":"51","line":88,"column":22,"nodeType":"45","messageId":"46","endLine":88,"endColumn":26},{"ruleId":"43","severity":2,"message":"51","line":88,"column":31,"nodeType":"45","messageId":"46","endLine":88,"endColumn":35},{"ruleId":"52","severity":1,"message":"53","line":8,"column":18,"nodeType":"54","messageId":"55","endLine":8,"endColumn":21,"suggestions":"56"},{"ruleId":"57","severity":2,"message":"58","line":29,"column":11,"nodeType":"45","messageId":"59","endLine":29,"endColumn":32,"fix":"60"},{"ruleId":"57","severity":2,"message":"61","line":41,"column":11,"nodeType":"45","messageId":"59","endLine":41,"endColumn":23,"fix":"62"},{"ruleId":"57","severity":2,"message":"63","line":55,"column":11,"nodeType":"45","messageId":"59","endLine":55,"endColumn":19,"fix":"64"},{"ruleId":"47","severity":1,"message":"65","line":66,"column":9,"nodeType":"45","messageId":"49","endLine":66,"endColumn":22},{"ruleId":"57","severity":2,"message":"66","line":66,"column":9,"nodeType":"45","messageId":"59","endLine":66,"endColumn":22,"fix":"67"},{"ruleId":"57","severity":2,"message":"68","line":80,"column":9,"nodeType":"45","messageId":"59","endLine":80,"endColumn":17,"fix":"69"},{"ruleId":"47","severity":1,"message":"70","line":81,"column":9,"nodeType":"45","messageId":"49","endLine":81,"endColumn":16},{"ruleId":"57","severity":2,"message":"71","line":81,"column":9,"nodeType":"45","messageId":"59","endLine":81,"endColumn":16,"fix":"72"},{"ruleId":"57","severity":2,"message":"73","line":89,"column":9,"nodeType":"45","messageId":"59","endLine":89,"endColumn":22,"fix":"74"},{"ruleId":"57","severity":2,"message":"68","line":90,"column":9,"nodeType":"45","messageId":"59","endLine":90,"endColumn":17,"fix":"75"},{"ruleId":"76","severity":2,"message":"77","line":98,"column":5,"nodeType":"78","messageId":"79","endLine":98,"endColumn":91,"fix":"80"},{"ruleId":"57","severity":2,"message":"81","line":119,"column":13,"nodeType":"45","messageId":"59","endLine":119,"endColumn":17,"fix":"82"},{"ruleId":"47","severity":1,"message":"83","line":121,"column":11,"nodeType":"45","messageId":"49","endLine":121,"endColumn":24},{"ruleId":"57","severity":2,"message":"73","line":121,"column":11,"nodeType":"45","messageId":"59","endLine":121,"endColumn":24,"fix":"84"},"no-undef","'Anagram' is not defined.","Identifier","undef","@typescript-eslint/no-unused-vars","'loadAnagramsToTxt' is defined but never used.","unusedVar","'fileTxtToHashMap' is defined but never used.","'vals' is not defined.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["85","86"],"prefer-const","'responseTextMultiLine' is never reassigned. Use 'const' instead.","useConst",{"range":"87","text":"88"},"'anagramEntry' is never reassigned. Use 'const' instead.",{"range":"89","text":"90"},"'response' is never reassigned. Use 'const' instead.",{"range":"91","text":"92"},"'dictionaryArr' is assigned a value but never used.","'dictionaryArr' is never reassigned. Use 'const' instead.",{"range":"93","text":"94"},"'anagrams' is never reassigned. Use 'const' instead.",{"range":"95","text":"96"},"'cleaned' is assigned a value but never used.","'cleaned' is never reassigned. Use 'const' instead.",{"range":"97","text":"98"},"'sortedWordKey' is never reassigned. Use 'const' instead.",{"range":"99","text":"100"},{"range":"101","text":"102"},"no-var","Unexpected var, use let or const instead.","VariableDeclaration","unexpectedVar",{"range":"103","text":"104"},"'word' is never reassigned. Use 'const' instead.",{"range":"105","text":"106"},"'sortedWordKey' is assigned a value but never used.",{"range":"107","text":"100"},{"messageId":"108","fix":"109","desc":"110"},{"messageId":"111","fix":"112","desc":"113"},[1001,1061],"const responseTextMultiLine = await this.fetchAnagram(source);",[1329,1364],"const anagramEntry = line.split(',');",[1738,1773],"const response = await fetch(source);",[2037,2088],"const dictionaryArr = this.loadDictionaryIntoArray();",[2669,2718],"const anagrams = anagramsCommaSeperated.split(',');",[2724,2787],"const cleaned = anagrams.filter((item) => item.match(/^[a-z]+/));",[3025,3064],"const sortedWordKey = this.sortStr(word);",[3070,3120],"const anagrams = this.anagramMap.get(sortedWordKey);",[3330,3333],"let",[3913,3921],"const word",[4015,4054],"suggestUnknown",{"range":"114","text":"115"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"116","text":"117"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[245,248],"unknown",[245,248],"never"]